from threading import Thread
import time
from datetime import datetime
from electricity_bot.config import ADDRESS
from electricity_bot.vars import generic, none, cancel, generic_choice
from telebot import TeleBot, types
import random
import os.path


def termux_apibattery_status():
    states = ["PLUGGED", "UNPLUGGED"]
    result = random.randint(0, 1)
    print(states[result])
    return {"plugged": states[result]}


def loop(bot: TeleBot, run_event: Thread) -> None:
    print("Script is up and running")
    while run_event.is_set():
        time.sleep(10)
        a = termux_apibattery_status()
        t = time.localtime()
        current_time = time.strftime("%H:%M:%S", t)
        print(current_time)
        if a["plugged"] == "UNPLUGGED":
            if bot.state_v != False:
                bot.state_v = False
                for user_id in bot.storage.read():
                    bot.send_message(
                        user_id,
                        f"‚ùå {current_time} - {ADDRESS}, —Å–≤—ñ—Ç–ª–æ –≤–∏–º–∫–Ω—É–ª–∏.",
                        parse_mode="html",
                    )
            else:
                continue
        else:
            if bot.state_v != True:
                bot.state_v = True
                for user_id in bot.storage.read():
                    bot.send_message(
                        user_id,
                        f"‚úÖ {current_time} - –Ü–≤–∞—Å—é–∫–∞ 50–ê, —Å–≤—ñ—Ç–ª–æ —É–≤—ñ–º–∫–Ω—É–ª–∏.",
                        parse_mode="html",
                    )
            else:
                continue


def start(message: types.Message, bot: TeleBot) -> None:
    name = message.from_user.first_name
    if name.lower() == "group":
        bot.send_message(
            message.chat.id,
            f"üëã –ü—Ä–∏–≤—ñ—Ç<b> –≤—Å—ñ–º</b>! \n\nüí° –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –±—É–¥–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏ –≤–∞—Å –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —É –±—É–¥–∏–Ω–∫—É {ADDRESS}. –ú–µ–Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤ –≥—Ä—É–ø–∏ –∞–±–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.",
            parse_mode="html",
            reply_markup=generic,
        )
    else:
        bot.send_message(
            message.chat.id,
            f"üëã –ü—Ä–∏–≤—ñ—Ç,<b> {name}</b>! \n\nüí° –Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –±—É–¥–µ —Ç–µ–±–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏ –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —É –±—É–¥–∏–Ω–∫—É {ADDRESS}. –ú–µ–Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤ –≥—Ä—É–ø–∏ –∞–±–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.",
            parse_mode="html",
            reply_markup=generic,
        )


def generic(message: types.Message, bot: TeleBot) -> None:
    name = message.from_user.first_name
    bot.send_message(
        message.chat.id,
        f"üëã –ß–∏–º —è –º–æ–∂—É —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏,<b> {name}</b>?",
        parse_mode="html",
        reply_markup=generic,
    )


def handle_other(message: types.Message, bot: TeleBot) -> None:
    bot.send_message(
        message.chat.id,
        f"–Ø —â–µ –Ω–µ –≤–º—ñ—é —Å–ø—Ä–∏–π–º–∞—Ç–∏ —Ç–∞–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –©–æ–± –º–Ω–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ.",
        parse_mode="html",
        reply_markup=generic,
    )


def subscribe(message: types.Message, bot: TeleBot) -> None:
    if not bot.storage.subscribed(message.from_user.id):
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!",
            parse_mode="html",
            reply_markup=generic,
        )
        bot.storage.save(message.chat.id)
    else:
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>–≤–∂–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.",
            parse_mode="html",
            reply_markup=generic,
        )


def unsubscribe(message: types.Message, bot: TeleBot) -> None:
    if bot.storage.subscribed(message.from_user.id):
        bot.storage.delete(message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å!",
            parse_mode="html",
            reply_markup=generic,
        )
    else:
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>–Ω–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.",
            parse_mode="html",
            reply_markup=generic,
        )


def state(message: types.Message, bot: TeleBot) -> None:
    t = time.localtime()
    current_time = time.strftime("%H:%M:%S", t)
    if bot.state_v == True:
        bot.send_message(
            message.chat.id,
            f"‚úÖ –°—Ç–∞–Ω–æ–º –Ω–∞ {current_time} –∑–∞ –∞–¥—Ä–µ—Å–æ—é {ADDRESS} —Å–≤—ñ—Ç–ª–æ <b>—î</b>.",
            parse_mode="html",
            reply_markup=generic,
        )
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –°—Ç–∞–Ω–æ–º –Ω–∞ {current_time} –∑–∞ –∞–¥—Ä–µ—Å–æ—é {ADDRESS} —Å–≤—ñ—Ç–ª–∞ <b>–Ω–µ–º–∞</b>.",
            parse_mode="html",
            reply_markup=generic,
        )


def add_schedule(message: types.Message, bot: TeleBot, generic: bool) -> None:
    if bot.is_admin(message):
        if generic:
            bot.send_message(
                message.chat.id,
                f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –≥—Ä–∞—Ñ—ñ–∫—É.",
                parse_mode="html",
                reply_markup=cancel,
            )
            bot.register_next_step_handler(message, handle_photos, bot, generic)
        else:
            current_datetime = datetime.now()
            filename = "schedule/" + current_datetime.strftime("%d-%m-%Y") + ".jpg"
            if filename.exists():
                bot.send_message(
                    message.chat.id,
                    f"–ì—Ä–∞—Ñ—ñ–∫ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ. –û–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ?",
                    parse_mode="html",
                    reply_markup=generic_choice,
                )
            bot.register_next_step_handler(message, do_update_schedule, bot)

    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º —Ü—å–æ–≥–æ –±–æ—Ç–∞.",
            parse_mode="html",
            reply_markup=generic,
        )


def do_update_schedule(message: types.Message, bot: TeleBot):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.generic()
    elif message.text == "–¢–∞–∫":
        bot.send_message(
            message.chat.id,
            f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –≥—Ä–∞—Ñ—ñ–∫—É.",
            parse_mode="html",
            reply_markup=cancel,
        )
        bot.register_next_step_handler(message, handle_photos, bot, False)

    elif message.text == "–ù—ñ":
        bot.generic()
    else:
        bot.send_message(
            message.chat.id,
            f'–ù–µ —Ä–æ–∑—É–º—ñ—é. –û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å "–¢–∞–∫", "–ù—ñ" –∞–±–æ "–ù–∞–∑–∞–¥".',
            parse_mode="html",
            reply_markup=generic_choice,
        )


def handle_photos(message: types.Message, bot: TeleBot, generic: bool) -> None:
    if message.content_type == "photo":
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        current_datetime = datetime.now()
        filename = current_datetime.strftime("%d-%m-%Y") + ".jpg"
        with open(filename, "wb") as new_file:
            new_file.write(downloaded_file)

        bot.send_message(
            message.chat.id,
            f"–ì—Ä–∞—Ñ—ñ–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ",
            parse_mode="html",
            reply_markup=cancel,
        )
    else:
        if message.text == "–ù–∞–∑–∞–¥":
            bot.generic()
        else:
            bot.send_message(
                message.chat.id,
                f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.",
                parse_mode="html",
                reply_markup=cancel,
            )
            bot.register_next_step_handler(message, handle_photos, bot)
