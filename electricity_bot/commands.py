from threading import Thread
import time
from electricity_bot.config import ADDRESS
from electricity_bot.vars import generic_markup, cancel, generic_choice
from electricity_bot.time import get_date, get_time
from electricity_bot import termux_api
from telebot import TeleBot, types

# import random


# def termux_apibattery_status():
#     states = ["PLUGGED", "UNPLUGGED"]
#     result = random.randint(0, 1)
#     print(states[result])
#     return {"plugged": states[result]}


def loop(bot: TeleBot, run_event: Thread) -> None:

    a = termux_api.battery_status()
    if a.result["plugged"] == "UNPLUGGED":
        bot.state_v = False
    else:
        bot.state_v = True

    bot.general_logger.info(
        f"Electricity checker thread initialized. Initial state: {a['plugged']}"
    )
    bot.outage_logger.info(
        f"Electricity checker thread initialized. Initial state: {a['plugged']}"
    )
    while run_event.is_set():
        time.sleep(10)
        current_time = get_time()
        a = termux_api.battery_status()
        if a.result["plugged"] == "UNPLUGGED":
            if bot.state_v != False:
                bot.state_v = False
                bot.general_logger.info(f"Electricity is out. Notifying users.")
                bot.outage_logger.warning(f"Electricity is out.")
                for user_id in bot.user_storage.read():
                    bot.general_logger.info(f"Notified: {user_id}")
                    bot.send_message(
                        user_id,
                        f"‚ùå {current_time} - {ADDRESS}, —Å–≤—ñ—Ç–ª–æ –≤–∏–º–∫–Ω—É–ª–∏.",
                        parse_mode="html",
                    )
                bot.general_logger.info(f"Users notified.")
            else:
                continue
        else:
            if bot.state_v != True:
                bot.state_v = True
                bot.general_logger.info(f"Electricity is back on. Notifying users.")
                bot.outage_logger.warning(f"Electricity is back on.")
                for user_id in bot.user_storage.read():
                    bot.general_logger.info(f"Notified: {user_id}")
                    bot.send_message(
                        user_id,
                        f"‚úÖ {current_time} - –Ü–≤–∞—Å—é–∫–∞ 50–ê, —Å–≤—ñ—Ç–ª–æ —É–≤—ñ–º–∫–Ω—É–ª–∏.",
                        parse_mode="html",
                    )
                bot.general_logger.info(f"Users notified.")
            else:
                continue


def start(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "start")
    name = message.from_user.first_name
    if name.lower() == "group":
        bot.send_message(
            message.chat.id,
            f"üëã –ü—Ä–∏–≤—ñ—Ç<b> –≤—Å—ñ–º</b>! \n\nüí° –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –±—É–¥–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏ –≤–∞—Å –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —É –±—É–¥–∏–Ω–∫—É {ADDRESS}. –ú–µ–Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤ –≥—Ä—É–ø–∏ –∞–±–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.",
            parse_mode="html",
            reply_markup=generic_markup,
        )
    else:
        bot.send_message(
            message.chat.id,
            f"üëã –ü—Ä–∏–≤—ñ—Ç,<b> {name}</b>! \n\nüí° –Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –±—É–¥–µ —Ç–µ–±–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏ –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —É –±—É–¥–∏–Ω–∫—É {ADDRESS}. –ú–µ–Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤ –≥—Ä—É–ø–∏ –∞–±–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def generic(message: types.Message, bot: TeleBot) -> None:
    name = message.from_user.first_name
    bot.send_message(
        message.chat.id,
        f"üëã –ß–∏–º —è –º–æ–∂—É —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏,<b> {name}</b>?",
        parse_mode="html",
        reply_markup=generic_markup,
    )


def handle_other(message: types.Message, bot: TeleBot) -> None:
    bot.send_message(
        message.chat.id,
        f"–Ø —â–µ –Ω–µ –≤–º—ñ—é —Å–ø—Ä–∏–π–º–∞—Ç–∏ —Ç–∞–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –©–æ–± –º–Ω–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ.",
        parse_mode="html",
        reply_markup=generic_markup,
    )


def subscribe(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "subscribe")
    if not bot.user_storage.subscribed(message.from_user.id):
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!",
            parse_mode="html",
            reply_markup=generic_markup,
        )
        bot.user_storage.save(message.chat.id)
    else:
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>–≤–∂–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def unsubscribe(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "unsubscribe")
    if bot.user_storage.subscribed(message.from_user.id):
        bot.user_storage.delete(message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å!",
            parse_mode="html",
            reply_markup=generic_markup,
        )
    else:
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>–Ω–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def state(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "state")
    current_time = get_time()
    if bot.state_v == True:
        bot.send_message(
            message.chat.id,
            f"‚úÖ –°—Ç–∞–Ω–æ–º –Ω–∞ {current_time} –∑–∞ –∞–¥—Ä–µ—Å–æ—é {ADDRESS} —Å–≤—ñ—Ç–ª–æ <b>—î</b>.",
            parse_mode="html",
            reply_markup=generic_markup,
        )
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –°—Ç–∞–Ω–æ–º –Ω–∞ {current_time} –∑–∞ –∞–¥—Ä–µ—Å–æ—é {ADDRESS} —Å–≤—ñ—Ç–ª–∞ <b>–Ω–µ–º–∞</b>.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def see_schedule(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "see_schedule")
    if bot.id_storage.exists():
        bot.send_photo(
            message.chat.id,
            bot.id_storage.get_schedule(),
            parse_mode="html",
            reply_markup=generic_markup,
            caption=f"–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞ –Ω–∞ {get_date()}",
        )
    elif bot.id_storage.exists("generic"):
        bot.send_photo(
            message.chat.id,
            bot.id_storage.get_schedule("generic"),
            parse_mode="html",
            reply_markup=generic_markup,
            caption=f"–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞ –Ω–∞ {get_date()}",
        )
    else:
        bot.send_message(
            message.chat.id,
            f"–ù–∞ –∂–∞–ª—å, –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î. –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å—Å—è, –∑–∞–ª–∏—à—Ç–µ –≤—ñ–¥–≥—É–∫.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def add_schedule(
    message: types.Message,
    bot: TeleBot,
    generic: bool,
) -> None:
    bot.user_action_logger.cmd(message, "add_schedule")
    if bot.is_admin(message):
        if generic:
            bot.send_message(
                message.chat.id,
                f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –≥—Ä–∞—Ñ—ñ–∫—É.",
                parse_mode="html",
                reply_markup=cancel,
            )
            bot.register_next_step_handler(message, handle_photos, bot, generic)
        else:
            if bot.id_storage.exists():
                bot.send_message(
                    message.chat.id,
                    f"–ì—Ä–∞—Ñ—ñ–∫ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ. –û–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ?",
                    parse_mode="html",
                    reply_markup=generic_choice,
                )
                bot.register_next_step_handler(message, do_update_schedule, bot)
            else:
                bot.send_message(
                    message.chat.id,
                    f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –≥—Ä–∞—Ñ—ñ–∫—É.",
                    parse_mode="html",
                    reply_markup=cancel,
                )
                bot.register_next_step_handler(message, handle_photos, bot, generic)
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º —Ü—å–æ–≥–æ –±–æ—Ç–∞.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def do_update_schedule(
    message: types.Message,
    bot: TeleBot,
):
    if message.text == "–ù–∞–∑–∞–¥":
        generic()
    elif message.text == "–¢–∞–∫":
        bot.send_message(
            message.chat.id,
            f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –≥—Ä–∞—Ñ—ñ–∫—É.",
            parse_mode="html",
            reply_markup=cancel,
        )
        bot.register_next_step_handler(message, handle_photos, bot, False)

    elif message.text == "–ù—ñ":
        generic()
    else:
        bot.send_message(
            message.chat.id,
            f'–ù–µ —Ä–æ–∑—É–º—ñ—é. –û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å "–¢–∞–∫", "–ù—ñ" –∞–±–æ "–ù–∞–∑–∞–¥".',
            parse_mode="html",
            reply_markup=generic_choice,
        )


def handle_photos(
    message: types.Message,
    bot: TeleBot,
    is_generic: bool = False,
) -> None:
    bot.user_action_logger.cmd(message, "handle_photos")
    if message.content_type == "photo":
        file_id = message.photo[-1].file_id
        bot.id_storage.save(file_id)

        bot.send_message(
            message.chat.id,
            f"–ì—Ä–∞—Ñ—ñ–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.",
            parse_mode="html",
            reply_markup=generic_markup,
        )
        generic()
    else:
        if message.text == "–ù–∞–∑–∞–¥":
            generic()
        else:
            bot.send_message(
                message.chat.id,
                f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.",
                parse_mode="html",
                reply_markup=cancel,
            )
            bot.register_next_step_handler(message, handle_photos, bot)
