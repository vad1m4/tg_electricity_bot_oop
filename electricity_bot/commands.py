from electricity_bot.config import ADDRESS
from electricity_bot.vars import (
    generic_markup,
    cancel,
    generic_choice,
    notifications_markup,
    schedules_markup,
)
from electricity_bot.time import get_date, get_time
from electricity_bot.funcs import handle_photos, do_update_schedule
from electricity_bot.funcs import add_schedule as _add_schedule
from telebot import TeleBot, types


def start(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "start")
    name = message.from_user.first_name
    if name.lower() == "group":
        bot.send_message(
            message.chat.id,
            f"üëã –ü—Ä–∏–≤—ñ—Ç<b> –≤—Å—ñ–º</b>! \n\nüí° –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –±—É–¥–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏ –≤–∞—Å –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —É –±—É–¥–∏–Ω–∫—É {ADDRESS}. –ú–µ–Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤ –≥—Ä—É–ø–∏ –∞–±–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.",
            parse_mode="html",
            reply_markup=generic_markup,
        )
    else:
        bot.send_message(
            message.chat.id,
            f"üëã –ü—Ä–∏–≤—ñ—Ç,<b> {name}</b>! \n\nüí° –Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –±—É–¥–µ —Ç–µ–±–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏ –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —É –±—É–¥–∏–Ω–∫—É {ADDRESS}. –ú–µ–Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤ –≥—Ä—É–ø–∏ –∞–±–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def handle_other(message: types.Message, bot: TeleBot) -> None:
    bot.send_message(
        message.chat.id,
        f"–Ø —â–µ –Ω–µ –≤–º—ñ—é —Å–ø—Ä–∏–π–º–∞—Ç–∏ —Ç–∞–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –©–æ–± –º–Ω–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ.",
        parse_mode="html",
        reply_markup=generic_markup,
    )


def subscribe(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "subscribe")
    if not bot.user_storage.subscribed(message.from_user.id, "outages"):
        bot.user_storage.save(message.chat.id, "outages")
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!",
            parse_mode="html",
            reply_markup=markup,
        )
    else:
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>–≤–∂–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.",
            parse_mode="html",
            reply_markup=markup,
        )


def notifications(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "notifications")
    markup = notifications_markup(bot, message.from_user.id)
    bot.send_message(
        message.chat.id,
        f"–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –≤–∞—à–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:\n\n–í–∏ {'–ø—ñ–¥–ø–∏—Å–∞–Ω—ñ' if bot.user_storage.subscribed(message.from_user.id, 'outages') else '–Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ'} –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n–í–∏ {'–ø—ñ–¥–ø–∏—Å–∞–Ω—ñ' if bot.user_storage.subscribed(message.from_user.id, 'stats') else '–Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ'} –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
        parse_mode="html",
        reply_markup=markup,
    )


def unsubscribe(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "unsubscribe")
    if bot.user_storage.subscribed(message.from_user.id, "outages"):
        bot.user_storage.delete(message.from_user.id, "outages")
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å!",
            parse_mode="html",
            reply_markup=markup,
        )
    else:
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>–Ω–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.",
            parse_mode="html",
            reply_markup=markup,
        )


def subscribe_stats(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "subscribe_stats")
    if not bot.user_storage.subscribed(message.from_user.id, "stats"):
        bot.user_storage.save(message.chat.id, "stats")
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!",
            parse_mode="html",
            reply_markup=markup,
        )
    else:
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>–≤–∂–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            parse_mode="html",
            reply_markup=markup,
        )


def unsubscribe_stats(message: types.Message, bot: TeleBot) -> None:
    markup = notifications_markup(bot, message.from_user.id)
    bot.user_action_logger.cmd(message, "unsubscribe_stats")
    if bot.user_storage.subscribed(message.from_user.id, "stats"):
        bot.user_storage.delete(message.from_user.id, "stats")
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!",
            parse_mode="html",
            reply_markup=markup,
        )
    else:
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>–Ω–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            parse_mode="html",
            reply_markup=markup,
        )


def state(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "state")
    current_time = get_time()
    if bot.state_v == True:
        bot.send_message(
            message.chat.id,
            f"‚úÖ –°—Ç–∞–Ω–æ–º –Ω–∞ {current_time} –∑–∞ –∞–¥—Ä–µ—Å–æ—é {ADDRESS} —Å–≤—ñ—Ç–ª–æ <b>—î</b>.",
            parse_mode="html",
            reply_markup=generic_markup,
        )
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –°—Ç–∞–Ω–æ–º –Ω–∞ {current_time} –∑–∞ –∞–¥—Ä–µ—Å–æ—é {ADDRESS} —Å–≤—ñ—Ç–ª–∞ <b>–Ω–µ–º–∞</b>.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def see_schedule(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "see_schedule")
    if bot.id_storage.exists():
        bot.send_photo(
            message.chat.id,
            bot.id_storage.get_schedule(),
            parse_mode="html",
            reply_markup=generic_markup,
            caption=f"–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞ –Ω–∞ {get_date()}.",
        )
    elif bot.id_storage.exists("generic"):
        bot.send_photo(
            message.chat.id,
            bot.id_storage.get_schedule("generic"),
            parse_mode="html",
            reply_markup=generic_markup,
            caption=f"–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞ –Ω–∞ {get_date()}",
        )
    else:
        bot.send_message(
            message.chat.id,
            f"–ù–∞ –∂–∞–ª—å, –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î. –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å—Å—è, –∑–∞–ª–∏—à—Ç–µ –≤—ñ–¥–≥—É–∫.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def add_schedule(
    message: types.Message,
    bot: TeleBot,
    generic: bool = False,
) -> None:
    bot.user_action_logger.cmd(message, "add_schedule")
    if generic:
        bot.send_message(
            message.chat.id,
            f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –≥—Ä–∞—Ñ—ñ–∫—É.",
            parse_mode="html",
            reply_markup=cancel,
        )
        bot.register_next_step_handler(message, handle_photos, bot, generic)
    else:
        markup = schedules_markup(bot)
        bot.send_message(
            message.chat.id,
            f"–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É.",
            parse_mode="html",
            reply_markup=markup,
        )
        bot.register_next_step_handler(message, _add_schedule, bot)


def current_date(message: types.Message, bot: TeleBot):
    if bot.is_admin(message):
        bot.send_message(
            message.chat.id,
            f"–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –¥–∞—Ç–∞: {get_date()} {get_time()}",
            parse_mode="html",
            reply_markup=generic_markup,
        )
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º —Ü—å–æ–≥–æ –±–æ—Ç–∞.",
            parse_mode="html",
            reply_markup=generic_markup,
        )
