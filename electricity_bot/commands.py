from electricity_bot.config import ADDRESS
from electricity_bot.vars import (
    _generic_markup,
    cancel,
    notifications_markup,
    schedules_markup,
    login_markup,
)
from electricity_bot.funcs import generic
from electricity_bot.time import get_date, get_time
from electricity_bot.config import admins as admins_list
from telebot import TeleBot, types


### User commands


def start(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "start")
    name = message.from_user.first_name
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤—ñ—Ç<b> {name}</b>! \n\nüí° –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –±—É–¥–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏ –≤–∞—Å –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —É –±—É–¥–∏–Ω–∫—É {ADDRESS}.\n\n–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑—ñ –º–Ω–æ—é, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        parse_mode="html",
        reply_markup=login_markup,
    )


def not_authorized(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "not authorized")
    bot.send_message(
        message.chat.id,
        f" \n\n‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑—ñ –º–Ω–æ—é, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        parse_mode="html",
        reply_markup=login_markup,
    )


def authorize(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "authorize")
    user_id = message.from_user.id
    generic_markup = _generic_markup(bot, message.from_user.id)
    if not bot.user_storage.is_authorized(user_id):
        phone_num = message.contact.phone_number

        if bot.user_storage.authorize(user_id, phone_num):
            bot.user_action_logger.info(
                f"Successfully authorised user {message.from_user.first_name} {message.from_user.last_name} via phone number ({phone_num})"
            )
            bot.general_logger.info(
                f"Successfully authorised user {message.from_user.first_name} {message.from_user.last_name} via phone number ({phone_num})"
            )
            bot.send_message(
                message.chat.id,
                f"‚úÖ –í–∞—Å –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone_num}. –¢–µ–ø–µ—Ä –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ñ —É—Å—ñ –º–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó.",
                parse_mode="html",
                reply_markup=generic_markup,
            )
        else:
            bot.user_action_logger.info(
                f"Failed to authorise user {message.from_user.first_name} {message.from_user.last_name} via phone number ({phone_num}): phone number blacklisted"
            )
            bot.general_logger.info(
                f"Failed to authorise user {message.from_user.first_name} {message.from_user.last_name} via phone number ({phone_num}): phone number blacklisted"
            )
            bot.send_message(
                message.chat.id,
                f"‚ùå –ù–∞ –∂–∞–ª—å, –Ω–æ–º–µ—Ä {phone_num} –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ. –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è: {bot.user_storage.why_blacklist(phone_num)}",
                parse_mode="html",
                reply_markup=cancel,
            )
    else:
        bot.send_message(
            message.chat.id,
            f"‚ôªÔ∏è –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—è –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def handle_other(message: types.Message, bot: TeleBot) -> None:
    generic_markup = _generic_markup(bot, message.from_user.id)
    bot.send_message(
        message.chat.id,
        f"ü§ñ –Ø —â–µ –Ω–µ –≤–º—ñ—é —Å–ø—Ä–∏–π–º–∞—Ç–∏ —Ç–∞–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –©–æ–± –º–Ω–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ.",
        parse_mode="html",
        reply_markup=generic_markup,
    )


def subscribe(message: types.Message, bot: TeleBot) -> None:
    generic_markup = _generic_markup(bot, message.from_user.id)
    bot.user_action_logger.cmd(message, "subscribe")
    if not bot.user_storage.subscribed(message.from_user.id, "outages"):
        bot.user_storage.save(message.chat.id, "outages")
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!",
            parse_mode="html",
            reply_markup=markup,
        )
    else:
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>–≤–∂–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.",
            parse_mode="html",
            reply_markup=markup,
        )


def notifications(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "notifications")
    markup = notifications_markup(bot, message.from_user.id)
    bot.send_message(
        message.chat.id,
        f"üõ† –û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –≤–∞—à–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:\n\n–í–∏ {'–ø—ñ–¥–ø–∏—Å–∞–Ω—ñ' if bot.user_storage.subscribed(message.from_user.id, 'outages') else '–Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ'} –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n–í–∏ {'–ø—ñ–¥–ø–∏—Å–∞–Ω—ñ' if bot.user_storage.subscribed(message.from_user.id, 'stats') else '–Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ'} –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
        parse_mode="html",
        reply_markup=markup,
    )


def unsubscribe(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "unsubscribe")
    if bot.user_storage.subscribed(message.from_user.id, "outages"):
        bot.user_storage.delete(message.from_user.id, "outages")
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å!",
            parse_mode="html",
            reply_markup=markup,
        )
    else:
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>–Ω–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.",
            parse_mode="html",
            reply_markup=markup,
        )


def subscribe_stats(message: types.Message, bot: TeleBot) -> None:
    bot.user_action_logger.cmd(message, "subscribe_stats")
    if not bot.user_storage.subscribed(message.from_user.id, "stats"):
        bot.user_storage.save(message.chat.id, "stats")
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!",
            parse_mode="html",
            reply_markup=markup,
        )
    else:
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîî –í–∏ <b>–≤–∂–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            parse_mode="html",
            reply_markup=markup,
        )


def unsubscribe_stats(message: types.Message, bot: TeleBot) -> None:
    markup = notifications_markup(bot, message.from_user.id)
    bot.user_action_logger.cmd(message, "unsubscribe_stats")
    if bot.user_storage.subscribed(message.from_user.id, "stats"):
        bot.user_storage.delete(message.from_user.id, "stats")
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>—É—Å–ø—ñ—à–Ω–æ</b> –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!",
            parse_mode="html",
            reply_markup=markup,
        )
    else:
        markup = notifications_markup(bot, message.from_user.id)
        bot.send_message(
            message.chat.id,
            "üîï –í–∏ <b>–Ω–µ</b> –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            parse_mode="html",
            reply_markup=markup,
        )


def state(message: types.Message, bot: TeleBot) -> None:
    generic_markup = _generic_markup(bot, message.from_user.id)
    bot.user_action_logger.cmd(message, "state")
    current_time = get_time()
    if bot.state_v == True:
        bot.send_message(
            message.chat.id,
            f"‚úÖ –°—Ç–∞–Ω–æ–º –Ω–∞ {current_time} –∑–∞ –∞–¥—Ä–µ—Å–æ—é {ADDRESS} —Å–≤—ñ—Ç–ª–æ <b>—î</b>.",
            parse_mode="html",
            reply_markup=generic_markup,
        )
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –°—Ç–∞–Ω–æ–º –Ω–∞ {current_time} –∑–∞ –∞–¥—Ä–µ—Å–æ—é {ADDRESS} —Å–≤—ñ—Ç–ª–∞ <b>–Ω–µ–º–∞</b>.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def see_schedule(message: types.Message, bot: TeleBot) -> None:
    generic_markup = _generic_markup(bot, message.from_user.id)
    bot.user_action_logger.cmd(message, "see_schedule")
    if bot.id_storage.exists():
        bot.send_photo(
            message.chat.id,
            bot.id_storage.get_schedule(get_date()),
            parse_mode="html",
            reply_markup=generic_markup,
            caption=f"üí° –ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞ –Ω–∞ {get_date()}.",
        )
    elif bot.id_storage.exists("generic"):
        bot.send_photo(
            message.chat.id,
            bot.id_storage.get_schedule("generic"),
            parse_mode="html",
            reply_markup=generic_markup,
            caption=f'üí° –ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞ –Ω–∞ {get_date()}\n\n<i>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫? –í–∏ –º–æ–∂–µ—Ç–µ <a href="/feedback">–∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫</a></i>',
        )
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –ù–∞ –∂–∞–ª—å, –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î. –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å—Å—è, –∑–∞–ª–∏—à—Ç–µ –≤—ñ–¥–≥—É–∫.",
            parse_mode="html",
            reply_markup=generic_markup,
        )


def _feedback(message: types.Message, bot: TeleBot) -> None:
    bot.send_message(
        message.chat.id,
        f"üì≤ –ß—É–¥–æ–≤–æ! –ù–∞–ø–∏—â—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫ —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.",
        parse_mode="html",
        reply_markup=cancel,
    )
    bot.register_next_step_handler(message, feedback, bot)


def feedback(message: types.Message, bot: TeleBot) -> None:
    if message.text == "–ù–∞–∑–∞–¥":
        generic(message, bot)
    else:
        bot.send_message(
            message.from_user.id,
            f"‚úÖ –í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ª–∏—à–µ–Ω–æ!",
            parse_mode="html",
        )
        bot.send_message(
            admins_list[0],
            f'‚ùï {message.from_user.first_name} {message.from_user.last_name} [{message.from_user.id}] –∑–∞–ª–∏—à–∏–ª–∏ –≤—ñ–¥–≥—É–∫!\n\n"{message.text}"',
            parse_mode="html",
        )


""
